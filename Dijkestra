const ll lx = 1e5 + 5;

vector<int> v[lx];
vector<int> cost[lx];
int dis[lx];
int vis[lx];

void dijkstra(int source, int n)
{
    for (int i = 0; i <= n + 2; i++)
    {
        dis[i] = INT_MAX;
    }

    priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;
    dis[source] = 0;

    pq.push(make_pair(0, source));

    while (!pq.empty())
    {
        ll dist = pq.top().first;
        ll prev = pq.top().second;
        pq.pop();

        if (dis[prev] < dist)
            continue; 			// optional

        for (int i = 0; i < v[prev].size(); i++)
        {
            ll x = v[prev][i];
            ll c = cost[prev][i];

            if (dis[x] > dis[prev] + c)
            {
                dis[x] = dis[prev] + c;
                pq.push(make_pair(dis[x], x));
            }
        }
    }
}
