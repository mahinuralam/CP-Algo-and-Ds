Binary Search:

Returns only a bool answer searched number is there or not

bool p = binary_search(v.begin(),v.end(), number);

Lower bound:

 This means that the function returns the index of the next smallest number just greater than or equal to that number.

If there are multiple values that are equal to val, lower_bound() returns the index of the first such value.

Syntex:

lower_bound(v.begin(),v.end(), number);

Index er Syntax:

auto it = lower_bound(v.begin(),v.end(), number);

int x = it - v.being(); //index

Upper bound:

It returns an iterator pointing to the first element in the range [first, last) that is greater than value, or last if no such element is found. 

The elements in the range shall already be sorted or at least partitioned with respect to val.

Syntex:

upper_bound(v.begin(),v.end(), number);

Index er Syntax:

auto it = upper_bound(v.begin(),v.end(), number);

int x = it - v.being() - 1; // index

MultiSet:

multiset<ll, greater<ll> >mst;

First value, Second how to sort it.
Remove, insert Olog(n)

In a multiset, the value of an element also identifies it (the value is itself the key, of type T). The value of the elements in a multiset cannot be modified once in the container (the elements are always const), but they can be inserted or removed from the container.


Binary search on multiset:

auto it = st.lower_bound( number ); //value


Priority Queue:

// works in log2n time similar to multiset
    
    priority_queue<ll>q; // sorts greater to smaller
    
    priority_queue<ll, vector<ll>, greater<ll> >q; // sorts smaller to greater
    
    priority_queue<pair<ll,ll> >q; //greater first value then greater second value
    
    priority_queue<pair<ll,ll>, vector<pair<ll,ll> >, greater<pair<ll,ll> > >q; //smaller first value then   smaller second value in pair
    
    
    
    // printing pq
    while(!q.empty())
    {
        cout<<q.top()<<endl;
        q.pop();
    }
    
    // first value greater and second value smaller 
    while(!q.empty())
    {
        cout<<q.top().first<<" "<<q.top.second * -1 <<endl;
        q.pop();
    }
