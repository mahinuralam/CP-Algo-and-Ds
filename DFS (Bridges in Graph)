const ll SZ = 1e6 + 5;
ll tin[SZ];
ll low[SZ];
ll vis[SZ];
vector<ll> adj[SZ];
ll timer;

void dfs(ll node, ll parent, ll timer)
{
    vis[node] = 1;
    tin[node] = low[node] = timer++;
    for (auto child : adj[node])
    {
        if (child == parent)
        {
            continue;
        }
        if (vis[child] == 0)
        {
            dfs(child, node, timer);
            low[node] = min(low[node], low[child]);
            if (low[child] > tin[node])
            {
                vp.push_back({min(child, node), max(node, child)});
            }
        }
        else
        {
            low[node] = min(low[node], tin[child]);
        }
    }
}

void init()
{
    memset(vis, 0, sizeof(vis));
    memset(tin, -1, sizeof(tin));
    memset(low, -1, sizeof(low));
    for (int i = 0; i < n; i++)
    {
        adj[i].clear();
    }
}

// dfs call -> dfs(i, -1, timer);
